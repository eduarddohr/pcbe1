interface Resource{

}

class Stone implements Resource{

}
class Brick implements Resource{

}
class Wood implements Resource{

}

abstract class Objective{

	private Map<Resource,Integer>  obj_res; //dictionar cu resurse si numarul lor
	private int points;


	public Map<String,ArrayList<Resource>> checkIfCanBuild(ArrayList<Resource> resurse){ //parametru lista de resurse ale jucatorului intoarce dictionar cu cheile locked si needed

	}
}
class Road extends Objective implements Resource{

}
class Settlement extends Objective{

}
class Town extends Objective{

}

class Player extends Thread{

	private ArrayList<Resource> player_res; //resurse jucator
	private Map<Objective,Integer> objectives; //dictionar cu obiectivele si numarul lor
	private String name;

	private void recieveResource(){

	}
	private void giveResource(){

	}
	private int calculatePoints(){

	}
	private void takeTurn(){

	}
	private void getRandomResource(){ //cand ai indeplinit un obiectiv primesti alte 2 resurse

	}

}
class Trade{

	private String name;
	private Resource givenRes;
	private Resource takenRes;

}

class Game{

	3 X public static ArrayList<Resource> ; //3 teancuri de carti
	final public static ArrayList<Objective> obj_list; //lista cu obiective puse in ordinea importantei lor
	private ArrayList<Trade> marketplace; //lista cu trade-uri , cine ce da si ce ia
	final int nrPlayers;

	private boolean checkIfCanTrade(){

	}
	public static void main(String[] argv){

	}
}